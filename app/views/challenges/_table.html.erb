<table class="table table-sortable">
  <thead class="thead-dark" id="table-header">
    <tr>
      <th scope="col">Challenge id</th>
      <th scope="col">Tilte</th>
      <th scope="col">Description</th>
      <th scope="col">Votes Count</th>
      <th scope="col">Created By</th>
      <th scope="col">Created at</th>
      <th scope="col">Tags</th>
      <th scope="col">Collaborators</th>
    </tr>
  </thead>
  
    <tbody id="tbody">
    
  <% @challenge.each do |challenge| %>
      
      <tr>
        <td id="td1"><%= challenge.id %></td>
        <td><%= challenge.title %></td>
        <td><%= challenge.description %> </td>
        <td id="td4"> <div id="td4-div">
        <div >
          <% if challenge.votes.count == 0 %>
            <div class="votes-count">0</div>
          <% else %>
            <div class="votes-count"><%= challenge.votes.count %></div>
          <% end %>
        </div>
        <% if current_employee.id == challenge.employee_id %>
        <% else %>
          <% if challenge.voted_by?(current_employee,challenge) %>
            <div><%= link_to "-", downvote_challenge_path(challenge), method: :delete, class: "vote-button" %></div>
          <% else %>
            <div><%= link_to "+", upvote_challenge_path(challenge), method: :post, class: "vote-button" %></div>
          <% end %>
        <% end %>  
        </div> </td>
        <td ><div class="created-by"><%= "#{challenge.employee.fname}".html_safe %></div></td>
        <td><%= challenge.created_at %> </td>
        <td><%= challenge.tag %> </td>
        <td> 
          <div id="div1" class="tddiv2">
            <div id="div1-div1">
              <%= challenge.collaboraters_name(challenge.id) %>
            </div>
            <% if current_employee.id == challenge.employee_id %>
            <% else %>
              <% if challenge.collab_by?(current_employee, challenge) %> 
              <%= link_to "<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='blue' class='bi bi-x' viewBox='0 0 16 16'>
                                                                                                                              <path d='M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z'/>
                                                                                                                              </svg>".html_safe, collaborationsdelete_challenge_path(challenge), method: :delete, class: "tick" %>
              <% else %>
                <div>
                  <%= link_to "<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-check2' viewBox='0 0 16 16'>
                                                                                                                                                      <path d='M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z'/>
                                                                                                                                                      </svg>".html_safe, collaborations_challenge_path(challenge), method: :post, class: "tick" %>
                </div>
              <% end %>
            <% end %>
          </div>
        </td>
      </tr>
      
    <% end %>
  </tbody>  
</table>

<%# <div class="pag-div">
<%= will_paginate @challenge, :renderer => WillPaginate::ActionView::Bootstrap4LinkRenderer, class: "pag" %>


<script type="text/javascript">
/**
 * Sorts a HTML table.
 * 
 * @param {HTMLTableElement} table The table to sort
 * @param {number} column The index of the column to sort
 * @param {boolean} asc Determines if the sorting will be in ascending
 */
function sortTableByColumn(table, column, asc = true) {
    const dirModifier = asc ? 1 : -1;
    const tBody = table.tBodies[0];
    const rows = Array.from(tBody.querySelectorAll("tr"));

    // Sort each row
    const sortedRows = rows.sort((a, b) => {
        const aColText = a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
        const bColText = b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();

        return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
    });

    // Remove all existing TRs from the table
    while (tBody.firstChild) {
        tBody.removeChild(tBody.firstChild);
    }

    // Re-add the newly sorted rows
    tBody.append(...sortedRows);

    // Remember how the column is currently sorted
    table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-asc", asc);
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-desc", !asc);
}

document.querySelectorAll(".table-sortable th").forEach((headerCell,index) => {
  
     headerCell.addEventListener("click", () => {
        const tableElement = headerCell.parentElement.parentElement.parentElement;
        const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
        const currentIsAscending = headerCell.classList.contains("th-sort-asc");

        sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
    });
  
});

</script>